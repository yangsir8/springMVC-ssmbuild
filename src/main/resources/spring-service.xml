<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:context="http://www.springframework.org/schema/context"

       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">

<!--    注意： 因为该文件需要引用dao层的接口，故需要引用spring-dao.xml文件，一种方式是像下面一样使用import引入， 一种是将这些文件放到一个环境下，这里者几个文件均在Application Context中，所以不需要import了-->
<!--    <import resource="classpath:spring-dao.xml"/>-->
<!--    1.扫描service下的包,（自动识别service下的注解）-->
    <context:component-scan base-package="com.yang.service"/>
<!--    2.将我们的的所有业务类，注入到spring，可以通过配置，或者注解实现-->
    <bean id="BookServiceImpl" class="com.yang.service.BookServiceImpl">
        <property name="bookMapper" ref="bookMapper"/>
     </bean>
<!--3.生命事务配置-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
<!--        注入数据源-->
        <property name="dataSource" ref="dataSource"/>
    </bean>

<!--    4.aop事务支持-->


</beans>